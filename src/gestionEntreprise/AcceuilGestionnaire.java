
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gestionEntreprise;
import java.sql.*;
import java.lang.Class.*;
import java.util.*;


/**
 *
 * @author p1205670
 */
public class AcceuilGestionnaire extends javax.swing.JFrame {

    /**
     * Creates new form AcceuilGestionnaire
     */
    private Object makeObj(final String item)  {
     return new Object() { public String toString() { return item; } };
    }
    
    // Ouvre une connexion stockée dans la variable conn
    public void openConnection() throws java.sql.SQLException {
        //   String userid = "nom_utilisateur";   // A MODIFIER
        //   String password = "#########";  // A MODIFIER
        //   String URL = "jdbc:oracle:thin:@iuta.univ-lyon1.fr:1521:orcl";	// Adresse de l'hote distant

        String userid = "p0907867";   // A MODIFIER
        String password = "iut2012";  // A MODIFIER
        String URL = "jdbc:oracle:thin:@iuta.univ-lyon1.fr:1521:orcl";	// Adresse de l'hote distant
        java.sql.DriverManager.registerDriver(new oracle.jdbc.driver.OracleDriver());
        conn = java.sql.DriverManager.getConnection(URL, userid, password);

        if (conn == null) {
            Model.addElement("Probleme de connection.");
            System.exit(1);
        }
    }
    
    public void closeConnection() throws java.sql.SQLException {
        conn.close();	// Fermeture de la connection
    }
    
    public void remplirListes () {
        // remplir listes
        String nom;
        int id;
        comboEnt.removeAllItems();
        listeetude.removeAllItems();
        comboEtu.removeAllItems();
        try {
            openConnection();
            java.sql.Statement requete = conn.createStatement();
            java.sql.ResultSet resulent = requete.executeQuery(
            "select * from ENTREPRISE ORDER BY IDENT");
            while (resulent.next()) {
                nom = resulent.getString(2);
                id = resulent.getInt(1);
                comboEnt.addItem(makeObj(id+ " -- " +nom));
            }
            resulent.close();
            requete.close();
            closeConnection();
        } catch (java.sql.SQLException e) {
            Model.addElement("Erreur execution requete " + e.getMessage());
            affEnt.setModel(Model);
        }
        try {
            openConnection();
            java.sql.Statement requete = conn.createStatement();
            java.sql.ResultSet resuletu = requete.executeQuery(
            "select * from ETUDE ORDER BY IDCONVENTION");
            while (resuletu.next()) {
                nom = resuletu.getString(4);
                id = resuletu.getInt(2);
                listeetude.addItem(makeObj(id+ " -- " +nom));
            }
            resuletu.close();
            requete.close();
            closeConnection();
        } catch (java.sql.SQLException e) {
            Model.addElement("Erreur execution requete " + e.getMessage());
            etude.setModel(Model);
        }
        try {
            openConnection();
            java.sql.Statement requete = conn.createStatement();
            java.sql.ResultSet resuletu = requete.executeQuery(
            "select * from ETUDIANT ORDER BY IDETUDIANT");
            while (resuletu.next()) {
                nom = resuletu.getString(2);
                id = resuletu.getInt(1);
                comboEtu.addItem(makeObj(id+ " -- " +nom));
            }
            resuletu.close();
            requete.close();
            closeConnection();
        } catch (java.sql.SQLException e) {
            Model.addElement("Erreur execution requete " + e.getMessage());
            affEtu.setModel(Model);
        }
    }
    
    public AcceuilGestionnaire() {
        initComponents();
        setLocation(200, 150);
        remplirListes ();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        AcceuilGestionnaire = new javax.swing.JTabbedPane();
        Acceuil = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        Entreprise = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        affEnt = new javax.swing.JList();
        comboEnt = new javax.swing.JComboBox();
        afficherEnt = new javax.swing.JButton();
        créerEnt = new javax.swing.JButton();
        modifierEnt = new javax.swing.JButton();
        Etude = new javax.swing.JPanel();
        listeetude = new javax.swing.JComboBox();
        afficheretude = new javax.swing.JButton();
        modifieretude = new javax.swing.JButton();
        creeretude = new javax.swing.JButton();
        detailetude = new javax.swing.JScrollPane();
        etude = new javax.swing.JList();
        jButton2 = new javax.swing.JButton();
        Etudiant = new javax.swing.JPanel();
        comboEtu = new javax.swing.JComboBox();
        créerEtu = new javax.swing.JButton();
        suiviEtu = new javax.swing.JButton();
        gererFraisEtu = new javax.swing.JButton();
        gererAccEtu = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        affEtu = new javax.swing.JList();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setText("\nChoisisez l'onglet ...");
        jScrollPane2.setViewportView(jTextArea1);

        jButton1.setText("Fermer");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fin(evt);
            }
        });

        javax.swing.GroupLayout AcceuilLayout = new javax.swing.GroupLayout(Acceuil);
        Acceuil.setLayout(AcceuilLayout);
        AcceuilLayout.setHorizontalGroup(
            AcceuilLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AcceuilLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(AcceuilLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        AcceuilLayout.setVerticalGroup(
            AcceuilLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AcceuilLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 203, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        AcceuilGestionnaire.addTab("Acceuil", Acceuil);

        jScrollPane1.setViewportView(affEnt);

        afficherEnt.setText("Afficher");
        afficherEnt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                afficherEnt(evt);
            }
        });

        créerEnt.setText("Créer");
        créerEnt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                creerEnt(evt);
            }
        });

        modifierEnt.setText("Modifier");
        modifierEnt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifEnt(evt);
            }
        });

        javax.swing.GroupLayout EntrepriseLayout = new javax.swing.GroupLayout(Entreprise);
        Entreprise.setLayout(EntrepriseLayout);
        EntrepriseLayout.setHorizontalGroup(
            EntrepriseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EntrepriseLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(EntrepriseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
                    .addGroup(EntrepriseLayout.createSequentialGroup()
                        .addComponent(comboEnt, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(afficherEnt)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(modifierEnt)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(créerEnt)))
                .addContainerGap())
        );
        EntrepriseLayout.setVerticalGroup(
            EntrepriseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EntrepriseLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(EntrepriseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(créerEnt)
                    .addComponent(afficherEnt)
                    .addComponent(comboEnt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(modifierEnt))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(73, Short.MAX_VALUE))
        );

        AcceuilGestionnaire.addTab("Entreprise", Entreprise);

        afficheretude.setText("Afficher");
        afficheretude.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                afficheretude(evt);
            }
        });

        modifieretude.setText("Gérer les participants");
        modifieretude.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gererppant(evt);
            }
        });

        creeretude.setText("Creer");
        creeretude.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                creeretude(evt);
            }
        });

        detailetude.setViewportView(etude);

        jButton2.setText("Valider");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                valideretude(evt);
            }
        });

        javax.swing.GroupLayout EtudeLayout = new javax.swing.GroupLayout(Etude);
        Etude.setLayout(EtudeLayout);
        EtudeLayout.setHorizontalGroup(
            EtudeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EtudeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(EtudeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(detailetude)
                    .addGroup(EtudeLayout.createSequentialGroup()
                        .addComponent(listeetude, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(afficheretude)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(creeretude)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2)
                        .addGap(0, 26, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, EtudeLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(modifieretude)
                .addGap(58, 58, 58))
        );
        EtudeLayout.setVerticalGroup(
            EtudeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EtudeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(EtudeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(listeetude, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(afficheretude)
                    .addComponent(creeretude)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(modifieretude)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addComponent(detailetude, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53))
        );

        AcceuilGestionnaire.addTab("Etude", Etude);

        créerEtu.setText("Créer");
        créerEtu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                créerEtudiant(evt);
            }
        });

        suiviEtu.setText("Suivi");
        suiviEtu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                suiviEtudiant(evt);
            }
        });

        gererFraisEtu.setText("Gerer les frais");
        gererFraisEtu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gestionFrais(evt);
            }
        });

        gererAccEtu.setText("Gerer les accompte");
        gererAccEtu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GestionAccompte(evt);
            }
        });

        jScrollPane3.setViewportView(affEtu);

        javax.swing.GroupLayout EtudiantLayout = new javax.swing.GroupLayout(Etudiant);
        Etudiant.setLayout(EtudiantLayout);
        EtudiantLayout.setHorizontalGroup(
            EtudiantLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EtudiantLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(EtudiantLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(EtudiantLayout.createSequentialGroup()
                        .addComponent(comboEtu, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(EtudiantLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(gererAccEtu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(gererFraisEtu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(EtudiantLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(créerEtu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(suiviEtu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        EtudiantLayout.setVerticalGroup(
            EtudiantLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EtudiantLayout.createSequentialGroup()
                .addGroup(EtudiantLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(EtudiantLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(EtudiantLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(créerEtu)
                            .addComponent(gererFraisEtu))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(EtudiantLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(suiviEtu)
                            .addComponent(gererAccEtu)))
                    .addGroup(EtudiantLayout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(comboEtu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(92, Short.MAX_VALUE))
        );

        AcceuilGestionnaire.addTab("Etudiant", Etudiant);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(AcceuilGestionnaire)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(AcceuilGestionnaire)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void creerEnt(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_creerEnt
        int newid=0;
        try {
            openConnection();
            java.sql.Statement requete = conn.createStatement();
            java.sql.ResultSet resul = requete.executeQuery(
            "select max(IDENT) from entreprise");
            resul.next();
            
            newid = resul.getInt(1);
            resul.close();
            requete.close();
            closeConnection();
        } catch (java.sql.SQLException e) {
            Model.addElement("Erreur execution requete " + e.getMessage());
            affEnt.setModel(Model);
        }
        
        Entreprise e= new Entreprise(newid);
        ModifEntreprise bdd =new ModifEntreprise(this, true, e);
        bdd.setLocation(500, 400);
        bdd.setVisible(true);
        
        //on ajoute la nouvelle ligne à la base :
        if (e.nom == ""){
            
        }else {
            try {
                openConnection();
                java.sql.PreparedStatement requete = conn.prepareStatement(
                        "insert into entreprise (IDENT,NOMENT,ADRESSEENT,TELENT) "
                        + "values (? , ? , ? , ?)");

                requete.setInt(1,e.getId());
                requete.setString(2, e.getNom());
                requete.setString(3, e.getAdr());
                requete.setString(4, e.getTel());
                requete.executeUpdate();


                requete.close();
                closeConnection();
            } catch (java.sql.SQLException ex) {
                Model.addElement("Erreur execution requete " + ex.getMessage());
                affEnt.setModel(Model);
            }
        }
        remplirListes ();

        
    }//GEN-LAST:event_creerEnt

    private void afficherEnt(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_afficherEnt
        
        Model.clear();
        int id;
        String l,req;
        String [] t;
        l = comboEnt.getSelectedItem().toString();
        t = l.split(" ");
        
        id = Integer.parseInt(t[0]);
        req = "select * from ENTREPRISE where IDENT ="+id;
        String nom, adr, tel;
        
        try {
            openConnection();
            java.sql.Statement requete = conn.createStatement();
            java.sql.ResultSet resulent = requete.executeQuery(req
            );
            resulent.next();
            
                nom = resulent.getString(2);
                adr = resulent.getString(3);
                tel = resulent.getString(4);
                
                Model.addElement("nom : "+nom+"      adresse : "+adr+"         teléphone : "+tel);
            
            resulent.close();
            requete.close();
            closeConnection();
        } catch (java.sql.SQLException ex) {
            Model.addElement("Erreur execution requete " + ex.getMessage());
            affEnt.setModel(Model);
        }
        try {
            openConnection();
            java.sql.Statement requete = conn.createStatement();
            java.sql.ResultSet resuletu = requete.executeQuery(
            "select nometude from ETUDE where IDENT ="+id);
            Model.addElement(" ");
            Model.addElement("liste des etude demander par cette entreprise :");
            while (resuletu.next()) {
                nom = resuletu.getString(1);
                Model.addElement(nom);
            }
            resuletu.close();
            requete.close();
            closeConnection();
        } catch (java.sql.SQLException e) {
            Model.addElement("Erreur execution requete " + e.getMessage());
            affEnt.setModel(Model);
        }
        
        affEnt.setModel(Model);
    }//GEN-LAST:event_afficherEnt

    private void fin(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fin
        int rep = javax.swing.JOptionPane.showConfirmDialog(
                this, 
                "voulez-vous réellement vous arrêter ?", 
                "fin de l'application", 
                javax.swing.JOptionPane.YES_NO_OPTION);
        if (rep == javax.swing.JOptionPane.YES_OPTION){
            dispose();
            System.exit(0);
        }
    }//GEN-LAST:event_fin

    private void modifEnt(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifEnt
        
        int id;
        String l,req;
        String [] t;
        l = comboEnt.getSelectedItem().toString();
        t = l.split(" ");
        
        id = Integer.parseInt(t[0]);
        req = "select * from ENTREPRISE where IDENT ="+id;
        Entreprise e= new Entreprise(0);
        e.setId(id);
        try {
            openConnection();
            java.sql.Statement requete = conn.createStatement();
            java.sql.ResultSet resulent = requete.executeQuery(req
            );
            resulent.next();
            
                e.setNom(resulent.getString(2));
                e.setAdr(resulent.getString(3));
                e.setTel(resulent.getString(4));
            
            resulent.close();
            requete.close();
            closeConnection();
        } catch (java.sql.SQLException ex) {
            Model.addElement("Erreur execution requete " + ex.getMessage());
            affEnt.setModel(Model);
        }
        
        ModifEntreprise bdd =new ModifEntreprise(this, true, e);
        bdd.setLocation(500, 400);
        bdd.setVisible(true);
        
        //après modification :
        try {
            openConnection();
            String reqdel = "delete from ENTREPRISE where IDENT ="+id;
            java.sql.PreparedStatement requetup = conn.prepareStatement(reqdel);
            requetup.executeUpdate();
            try {
                openConnection();
                java.sql.PreparedStatement requete = conn.prepareStatement(
                        "insert into entreprise (IDENT,NOMENT,ADRESSEENT,TELENT) "
                        + "values (? , ? , ? , ?)");

                requete.setInt(1,e.getId());
                requete.setString(2, e.getNom());
                requete.setString(3, e.getAdr());
                requete.setString(4, e.getTel());
                requete.executeUpdate();


                requete.close();
                closeConnection();
            } catch (java.sql.SQLException ex) {
                Model.addElement("Erreur execution requete " + ex.getMessage());
            }
            
            closeConnection();
        } catch (java.sql.SQLException ex) {
            Model.addElement("Erreur execution requete " + ex.getMessage());
            affEnt.setModel(Model);
        }
        
        remplirListes ();
    }//GEN-LAST:event_modifEnt

    private void afficheretude(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_afficheretude
        
        Model.clear();
        int id;
        String l,req, req1;
        String [] t;
        l = listeetude.getSelectedItem().toString();
        t = l.split(" ");
        
        id = Integer.parseInt(t[0]);
        req = "select * from ETUDE where IDCONVENTION ="+id;
        
        String nomet, identet, dateconv, dureeet, datefin, noment, idconv;
        
        try {
            openConnection();
            java.sql.Statement requete = conn.createStatement();
            java.sql.ResultSet resulet = requete.executeQuery(req);
            resulet.next();
            
                nomet = resulet.getString(4);
                identet = resulet.getString(1);
                dateconv = resulet.getString(3);
                dureeet = resulet.getString(5);
                datefin = resulet.getString(6);
                idconv = resulet.getString(2);
                
                req1 = "select * from ENTREPRISE where IDENT="+identet;
                try {
                openConnection();
                java.sql.Statement requete1 = conn.createStatement();
                java.sql.ResultSet resulet1 = requete.executeQuery(req1);
                resulet1.next();
                
                noment = resulet1.getString(2);
                
                Model.addElement("Etude numero " + idconv + " : " + nomet);
                Model.addElement("Date début : " + dateconv);
                Model.addElement("Date fin prévue : " + datefin);
                Model.addElement("Durée de l'etude : " + dureeet);
                Model.addElement("Entreprise cliente : " + noment);
                
                resulet1.close();
                requete1.close();
                closeConnection();
                } catch (java.sql.SQLException ex) {
                    Model.addElement("Erreur execution requete " + ex.getMessage());
                }
            
            resulet.close();
            requete.close();
            closeConnection();
        } catch (java.sql.SQLException ex) {
            Model.addElement("Erreur execution requete " + ex.getMessage());
        }
        
        etude.setModel(Model);
        
    }//GEN-LAST:event_afficheretude

    private void gererppant(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gererppant
       
    }//GEN-LAST:event_gererppant

    private void creeretude(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_creeretude

        int id = 0;
        
        try {
            openConnection();
            java.sql.Statement requete = conn.createStatement();
            java.sql.ResultSet resulid = requete.executeQuery("select max(idconvention) from etude");
            resulid.next();
            
                id = resulid.getInt(1);
            
            resulid.close();
            requete.close();
            closeConnection();
        } catch (java.sql.SQLException ex) {
            Model.addElement("Erreur execution requete " + ex.getMessage());
        }
        
        Etude e = new Etude(id);
        CreationEtude bdd =new CreationEtude(this, true, e);
        bdd.setLocation(500, 400);
        bdd.setVisible(true);
        
        //on ajoute la nouvelle ligne à la base :

    }//GEN-LAST:event_creeretude

    private void valideretude(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_valideretude
        // TODO add your handling code here:
    }//GEN-LAST:event_valideretude

    private void créerEtudiant(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_créerEtudiant
        int newid=0;
        try {
            openConnection();
            java.sql.Statement requete = conn.createStatement();
            java.sql.ResultSet resul = requete.executeQuery(
            "select max(IDETUDIANT) from etudiant");
            resul.next();
            
            newid = resul.getInt(1);
            resul.close();
            requete.close();
            closeConnection();
        } catch (java.sql.SQLException e) {
            Model.addElement("Erreur execution requete " + e.getMessage());
        }
        
        Etudiant e= new Etudiant(newid);
        CreationEtudiant bdd =new CreationEtudiant(this, true, e);
        bdd.setLocation(500, 400);
        bdd.setVisible(true);
        
        //on ajoute la nouvelle ligne à la base :
        if (e.nom == ""){
            
        }else {
            try {
                openConnection();
                java.sql.PreparedStatement requete = conn.prepareStatement(
                        "insert into ETUDIANT (IDETUDIANT,NOMETUDIANT) "
                        + "values (? , ?)");

                requete.setInt(1,e.getId());
                requete.setString(2, e.getNom());
                requete.executeUpdate();


                requete.close();
                closeConnection();
            } catch (java.sql.SQLException ex) {
                Model.addElement("Erreur execution requete " + ex.getMessage());
            }
        }
        remplirListes ();
    }//GEN-LAST:event_créerEtudiant

    private void suiviEtudiant(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_suiviEtudiant
        int id;
        String l,req;
        String [] t;
        l = comboEtu.getSelectedItem().toString();
        t = l.split(" ");
        
        id = Integer.parseInt(t[0]);
        SuiviEtudiant bdd =new SuiviEtudiant(this, true, id);
        bdd.setLocation(500, 400);
        bdd.setVisible(true);
        
    }//GEN-LAST:event_suiviEtudiant

    private void GestionAccompte(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GestionAccompte
        int id;
        String l,req;
        String [] t;
        l = comboEtu.getSelectedItem().toString();
        t = l.split(" ");
        
        id = Integer.parseInt(t[0]);
        GestionAccompte bdd =new GestionAccompte(this, true, id);
        bdd.setLocation(500, 400);
        bdd.setVisible(true);
    }//GEN-LAST:event_GestionAccompte

    private void gestionFrais(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gestionFrais
        int id;
        String l,req;
        String [] t;
        l = comboEtu.getSelectedItem().toString();
        t = l.split(" ");
        
        id = Integer.parseInt(t[0]);
        gestionFrais bdd =new gestionFrais(this, true, id);
        bdd.setLocation(500, 400);
        bdd.setVisible(true);
    }//GEN-LAST:event_gestionFrais

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AcceuilGestionnaire.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AcceuilGestionnaire.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AcceuilGestionnaire.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AcceuilGestionnaire.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AcceuilGestionnaire().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Acceuil;
    private javax.swing.JTabbedPane AcceuilGestionnaire;
    private javax.swing.JPanel Entreprise;
    private javax.swing.JPanel Etude;
    private javax.swing.JPanel Etudiant;
    private javax.swing.JList affEnt;
    private javax.swing.JList affEtu;
    private javax.swing.JButton afficherEnt;
    private javax.swing.JButton afficheretude;
    private javax.swing.JComboBox comboEnt;
    private javax.swing.JComboBox comboEtu;
    private javax.swing.JButton creeretude;
    private javax.swing.JButton créerEnt;
    private javax.swing.JButton créerEtu;
    private javax.swing.JScrollPane detailetude;
    private javax.swing.JList etude;
    private javax.swing.JButton gererAccEtu;
    private javax.swing.JButton gererFraisEtu;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JComboBox listeetude;
    private javax.swing.JButton modifierEnt;
    private javax.swing.JButton modifieretude;
    private javax.swing.JButton suiviEtu;
    // End of variables declaration//GEN-END:variables
private javax.swing.DefaultListModel Model = new javax.swing.DefaultListModel();
private java.sql.Connection conn;

}
