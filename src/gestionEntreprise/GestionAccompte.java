/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gestionEntreprise;

/**
 *
 * @author p1205670
 */
public class GestionAccompte extends javax.swing.JDialog {

    /**
     * Creates new form GestionFrais
     */
    private Object makeObj(final String item)  {
     return new Object() { public String toString() { return item; } };
    }
    
    public void openConnection() throws java.sql.SQLException {
        //   String userid = "nom_utilisateur";   // A MODIFIER
        //   String password = "#########";  // A MODIFIER
        //   String URL = "jdbc:oracle:thin:@iuta.univ-lyon1.fr:1521:orcl";	// Adresse de l'hote distant

        String userid = "p0907867";   // A MODIFIER
        String password = "iut2012";  // A MODIFIER
        String URL = "jdbc:oracle:thin:@iuta.univ-lyon1.fr:1521:orcl";	// Adresse de l'hote distant
        java.sql.DriverManager.registerDriver(new oracle.jdbc.driver.OracleDriver());
        conn = java.sql.DriverManager.getConnection(URL, userid, password);

        if (conn == null) {
            ModelInfo.addElement("Probleme de connection.");
            System.exit(1);
        }
    }
    
    public void closeConnection() throws java.sql.SQLException {
        conn.close();	// Fermeture de la connection
    }
    
    public void rempirListEtude () {
        String Sreqlist;
        listEtude.removeAllItems();
        Sreqlist = "select * from ASSOCIATION join ETUDE "
                + "on ASSOCIATION.IDCONVENTION = ETUDE.IDCONVENTION "
                + "WHERE IDETUDIANT ="+idetudiant;
        
        try {
            listEtude.addItem("Selectionner l'étude à détailler");
            openConnection();
            java.sql.Statement reqlist = conn.createStatement();
            java.sql.ResultSet resullist = reqlist.executeQuery(Sreqlist);
            while (resullist.next()) {
                listEtude.addItem(makeObj(resullist.getInt("IDCONVENTION")+ " -- " +resullist.getString("NOMETUDE")));
            }
            
            reqlist.close();
            resullist.close();
            closeConnection();
        } catch (java.sql.SQLException e) {
            ModelInfo.addElement("Erreur execution requete " + e.getMessage());
            affAccompte.setModel(ModelInfo);
        }
    }
    
    public GestionAccompte(java.awt.Frame parent, boolean modal, int idetudiant) {
        super(parent, modal);
        initComponents();
        GestionAccompte.idetudiant = idetudiant;
        rempirListEtude();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        listEtude = new javax.swing.JComboBox();
        listeAccompte = new javax.swing.JComboBox();
        demande = new javax.swing.JButton();
        versement = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        affAccompte = new javax.swing.JList();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        Montant = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        listEtude.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                changerListeAcc(evt);
            }
        });

        demande.setText("Demander un accompte");
        demande.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                demandeAccompte(evt);
            }
        });

        versement.setText("Verser un accompte");
        versement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verserAcc(evt);
            }
        });

        jScrollPane1.setViewportView(affAccompte);

        jButton1.setText("retour");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                retour(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Montant demander :");

        Montant.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                vérif(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(listEtude, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Montant, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE))
                            .addComponent(listeAccompte, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(demande, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(versement, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(listEtude, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(Montant, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(demande))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(listeAccompte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(versement))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void retour(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_retour
                setVisible(false);
    }//GEN-LAST:event_retour

    private void changerListeAcc(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_changerListeAcc
        int id,idaccompte;
        String l;
        String [] t;
        l = listEtude.getSelectedItem().toString();
        t = l.split(" ");
        if (!(Character.isDigit( t[0].charAt(0)))) {
            
        }else {
            id = Integer.parseInt(t[0]);
            
            String Sreqlist;
            listeAccompte.removeAllItems();
            Sreqlist = "select * from ACCOMPTE WHERE IDETUDIANT = "+idetudiant+" AND IDCONVENTION = "+id;

            try {
                listeAccompte.addItem("Selectionner l'accompte");
                openConnection();
                java.sql.Statement reqlist = conn.createStatement();
                java.sql.ResultSet resullist = reqlist.executeQuery(Sreqlist);
                while (resullist.next()) {
                    if (resullist.getInt("DEMANDER") == 0) {
                        listeAccompte.addItem(makeObj(resullist.getInt("IDACCOMPTE")+" -- Demander"+ 
                                " -- " +resullist.getString("MONTANT")));
                    }else {
                        listeAccompte.addItem(makeObj(resullist.getInt("IDACCOMPTE")+" -- Verser"+ 
                                " -- " +resullist.getString("MONTANT")));
                    }
                }
                
                reqlist.close();
                resullist.close();
                closeConnection();
            } catch (java.sql.SQLException e) {
                ModelInfo.addElement("Erreur execution requete " + e.getMessage());
                affAccompte.setModel(ModelInfo);
            }

        }
    }//GEN-LAST:event_changerListeAcc

    private void vérif(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_vérif
        Character c =evt.getKeyChar();
        
        if (!(Character.isDigit(c))) {
           evt.consume();
        }
    }//GEN-LAST:event_vérif

    private void demandeAccompte(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_demandeAccompte
        int idEtude;
        String l;
        String [] t;
        l = listEtude.getSelectedItem().toString();
        t = l.split(" ");
        
        int newid=0;
        try {
            openConnection();
            java.sql.Statement requete = conn.createStatement();
            java.sql.ResultSet resul = requete.executeQuery(
            "select max(IDACCOMPTE) from ACCOMPTE");
            resul.next();
            
            newid = resul.getInt(1);
            newid++;
            resul.close();
            requete.close();
            closeConnection();
        } catch (java.sql.SQLException e) {
            ModelInfo.addElement("Erreur execution requete " + e.getMessage());
            affAccompte.setModel(ModelInfo);
        }
        
            try {
                
                if (!(Character.isDigit( t[0].charAt(0)))) {
                    ModelInfo.addElement("sélectionner une étude");
                    affAccompte.setModel(ModelInfo);

                }else {
                    
                    idEtude = Integer.parseInt(t[0]);
                    openConnection();
                    java.sql.PreparedStatement requete = conn.prepareStatement(
                            "insert into ACCOMPTE (IDCONVENTION,IDETUDIANT,DEMANDER,MONTANT,IDACCOMPTE) "
                            + "values (? , ? , ? , ?, ?)");

                    requete.setInt(1,idEtude);
                    requete.setInt(2,idetudiant);
                    requete.setInt(3, 0);
                    requete.setInt(4, Integer.parseInt(Montant.getText()));
                    requete.setInt(5,newid);
                    requete.executeUpdate();


                    requete.close();
                    closeConnection();
                    
                    ModelInfo.clear();
                    ModelInfo.addElement("Accompte demandé");
                    affAccompte.setModel(ModelInfo);
                }
                listeAccompte.removeAllItems();
                listEtude.setSelectedIndex(0);
            
            closeConnection();
        } catch (java.sql.SQLException ex) {
            ModelInfo.addElement("Erreur execution requete " + ex.getMessage());
            affAccompte.setModel(ModelInfo);
        }
        
    }//GEN-LAST:event_demandeAccompte

    private void verserAcc(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verserAcc
        int idAccompte,idEtude;
        String l;
        String [] t;
        l = listEtude.getSelectedItem().toString();
        t = l.split(" ");
        
        
        if (!(Character.isDigit( t[0].charAt(0)))) {
                ModelInfo.addElement("sélectionner une Etude");
                affAccompte.setModel(ModelInfo);
        }else {
            idEtude = Integer.parseInt(t[0]);
            l = listeAccompte.getSelectedItem().toString();
            t = l.split(" ");
            if (!(Character.isDigit( t[0].charAt(0)))) {
                ModelInfo.addElement("sélectionner un Accompte");
                affAccompte.setModel(ModelInfo);
            }else {
                idAccompte = Integer.parseInt(t[0]);
                try {
                    openConnection();
                    String reqdel = "delete from ACCOMPTE where IDACCOMPTE ="+idAccompte;
                    java.sql.PreparedStatement requetup = conn.prepareStatement(reqdel);
                    requetup.executeUpdate();
                    requetup.close();

                } catch (java.sql.SQLException ex) {
                ModelInfo.addElement("Erreur execution requete " + ex.getMessage());
                affAccompte.setModel(ModelInfo);
                }
                try {


                    java.sql.PreparedStatement requete = conn.prepareStatement(
                            "insert into ACCOMPTE (IDCONVENTION,IDETUDIANT,DEMANDER,MONTANT,IDACCOMPTE) "
                            + "values (? , ? , ? , ?, ?)");

                    requete.setInt(1,idEtude);
                    requete.setInt(2,idetudiant);
                    requete.setInt(3, 1);
                    requete.setInt(4, Integer.parseInt(t[4]));
                    requete.setInt(5,idAccompte);
                    requete.executeUpdate();


                    requete.close();

                    ModelInfo.clear();
                    ModelInfo.addElement("Accompte versé");
                    affAccompte.setModel(ModelInfo);
                    listeAccompte.removeAllItems();
                    listEtude.setSelectedIndex(0);
                    closeConnection();
                
                } catch (java.sql.SQLException ex) {
                    ModelInfo.addElement("Erreur execution requete " + ex.getMessage());
                    affAccompte.setModel(ModelInfo);
                }
            }
        }
        
    }//GEN-LAST:event_verserAcc

    /**
     * @param args the command line arguments
     */
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Montant;
    private javax.swing.JList affAccompte;
    private javax.swing.JButton demande;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox listEtude;
    private javax.swing.JComboBox listeAccompte;
    private javax.swing.JButton versement;
    // End of variables declaration//GEN-END:variables
    static int idetudiant;
    private javax.swing.DefaultListModel ModelInfo = new javax.swing.DefaultListModel();
    private java.sql.Connection conn;
}
